<template>
  <view>
    <view style="background-color: {{chatStatue==='open'?'#40c9ff':'#888888'}};" class="chat-page-status-style">
        {{chatStatusContent}}
    </view>
    <scroll-view
          enable-flex="{{true}}"
          style="height:{{pageHeight}}px;width: 100%;display: flex;flex-direction: column;margin-top: 54rpx;"
          scroll-y="true"
          scroll-top="{{scrollTopVal}}"
          bindtap="resetInputStatus">
      <repeat wx:for="{{chatItems}}" wx:key="{{index}}">
        <chatItem :chatItem="item" :textMessage.sync="textMessage"
        @imageClickEvent.user="previewImage"
        @chatVoiceItemClickEvent.user="palyVoice"
        @resendMsgEvent.user="resendMsg"></chatItem>
      </repeat>
    </scroll-view>
    <chatInput></chatInput>
  </view>
</template>

<script>
  import wepy from 'wepy';
  import http from '../../../utils/Base';
  import api from '../../../utils/API';
  import ChatItem from './component/chat-item';
  import ChatInput from './component/chat-input';
  import IMOperator from "./utils/im-operator";
  import UI from "./utils/ui";
  import MsgManager from "./utils/manager/msg-manager/msg-manager";
  export default class Chat extends wepy.page {
    config = {
      navigationBarTitleText: '对话列表',
      navigationBarBackgroundColor:'#ededed'
    }

    components = {
      chatItem:ChatItem,
      chatInput:ChatInput
    }
    
    data = {
      textMessage:'',
      chatStatue:'open',
      chatStatusContent:'',
      pageHeight:0,
      scrollTopVal:0,
      chatItems:[],
    }
    onLoad(options){
        const friend = JSON.parse(options.friend);
        wx.setNavigationBarTitle({
            title: friend.friendName || ''
        });
        this.pageHeight = wx.getSystemInfoSync().windowHeight*0.85;

        this.msgManager = new MsgManager(this); 
        this.imOperator = new IMOperator(this.$parent, friend);
        //设置监听 实时监听接受到的消息
        this.imOperator.onSimulateReceiveMsg((msg) => {
            console.log('receive Msg',msg);
            this.msgManager.showMsg({msg})
        });
        this.UI = new UI(this);
        this.UI.updateChatStatus('正在聊天中...');   
        console.log(this);     
    }
    /**
     * 模拟上传文件，注意这里的cbOk回调函数传入的参数应该是上传文件成功时返回的文件url，
     * 这里因为模拟，我直接用的savedFilePath
     * @param savedFilePath, 
     * @param duration, 
     * @param itemIndex
     */
    simulateUploadFile({savedFilePath, duration, itemIndex}) {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                let urlFromServerWhenUploadSuccess = savedFilePath;
                resolve({url: urlFromServerWhenUploadSuccess});
            }, 1000);
        });
    }
    /**
     * 发送消息
     * @param content, 
     * @param itemIndex
     */
    async sendMsg({content, itemIndex}) {
        try {
            const {msg} = await this.imOperator.onSimulateSendMsg({content})
            this.UI.updateViewWhenSendSuccess(msg, itemIndex);
            return {msg};
        } catch (e) {
            console.error(e);
            this.UI.updateViewWhenSendFailed(itemIndex);
        }
    }
    /**
     * 重发消息
     * @param e
     */
    resendMsgEvent(e) {
        const itemIndex = parseInt(e.currentTarget.dataset.resendIndex);
        const item = this.data.chatItems[itemIndex];
        this.UI.updateDataWhenStartSending(item, false, false);
        this.msgManager.resend({...item, itemIndex});
    }
    methods = {
        /**
         * 预览图片事件
         */
      previewImage(e){
          this.imageClickEvent(e);
      },
        /**
         * 点击语音消息事件
         */
      palyVoice(e){
        this.chatVoiceItemClickEvent(e);
      },
        /**
         * 重发消息事件
         */
      resendMsg(e){
          this.resendMsgEvent(e);
      }
    }

    events = {
      /**
       * 打开更多功能
       */
      'extraClickEvent':(param,$event)=>{
        console.log(param)
      },
      /**
       * 单击更能多功能单项
       */
      'extraItemClickEvent':(param,$event)=>{
        console.log(param)
  
        let chooseIndex = parseInt(param.index);
        if (chooseIndex === 2) {
            wx.showToast({title:'该功能正开发中！',icon:'none'})
            return;
        }
        wx.chooseImage({
            count: 1, // 默认9
            sizeType: ['compressed'],
            sourceType: chooseIndex === 0 ? ['album'] : ['camera'],
            success: (res) => {
                this.msgManager.sendMsg({type: IMOperator.ImageType, content: res.tempFilePaths[0]})
            }
        });
      },
      /**
       * 录音事件
       * 状态值status:
       *       START: 1,
       *       SUCCESS: 2,
       *       CANCEL: 3,
       *       SHORT: 4,
       *       FAIL: 5,
       *       UNAUTH: 6
       */
      'voiceRecordEvent':(param,$event)=>{
        
        //录音完成
        if (param.recordStatus === 2) {
            console.log(param)
            this.msgManager.sendMsg({
                type: IMOperator.VoiceType,
                content: param.data.tempFilePath,
                duration: Math.floor( param.data.duration / 1000)
            });
        }
        this.msgManager.stopAllVoice();
      },
      /**
       * 发送消息
       */
      'sendMessageEvent':(param,$event)=>{
        console.log(param)
        let content = param.value;
        this.msgManager.sendMsg({type: IMOperator.TextType, content});
      },
    }
  }
</script>

<style lang="scss">
page{
  background-color: #efefef;
}
.chat-page-status-style{
    width: 100%;
    height: 54rpx;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 26rpx;
    color: white;
    position: fixed;
    top:0;
    left:0;
    z-index: 20;
}
</style>
